const Notification = require("../models/Notification.model");
const User = require("../models/User.model");
const Event = require("../models/Event.model");
const Post = require("../models/Post.model");

// üü© T·∫°o th√¥ng b√°o Like
const createLikeNotification = async (req, res) => {
  try {
    const { postId } = req.body;
    const senderId = req.user.id;

    const post = await Post.findById(postId).populate("userId", "name");
    if (!post) return res.status(404).json({ success: false, message: "Kh√¥ng t√¨m th·∫•y b√†i vi·∫øt" });

    if (post.userId._id.toString() === senderId)
      return res.status(200).json({ success: true, message: "Kh√¥ng t·∫°o th√¥ng b√°o cho ch√≠nh m√¨nh" });

    const content = `${req.user.name} ƒë√£ th√≠ch b√†i vi·∫øt c·ªßa b·∫°n.`;
    const notification = await Notification.create({
      userId: post.userId._id,
      senderId,
      postId,
      type: "like_post",
      content,
    });

    res.status(201).json({ success: true, notification });
  } catch (err) {
    console.error("‚ùå L·ªói t·∫°o th√¥ng b√°o like:", err);
    res.status(500).json({ success: false, message: "L·ªói server" });
  }
};

// üü© T·∫°o th√¥ng b√°o Comment
const createCommentNotification = async (req, res) => {
  try {
    const { postId } = req.body;
    const senderId = req.user.id;

    const post = await Post.findById(postId).populate("userId", "name");
    if (!post) return res.status(404).json({ success: false, message: "Kh√¥ng t√¨m th·∫•y b√†i vi·∫øt" });

    if (post.userId._id.toString() === senderId)
      return res.status(200).json({ success: true, message: "Kh√¥ng t·∫°o th√¥ng b√°o cho ch√≠nh m√¨nh" });

    const content = `${req.user.name} ƒë√£ b√¨nh lu·∫≠n b√†i vi·∫øt c·ªßa b·∫°n.`;
    const notification = await Notification.create({
      userId: post.userId._id,
      senderId,
      postId,
      type: "comment_post",
      content,
    });

    res.status(201).json({ success: true, notification });
  } catch (err) {
    console.error("‚ùå L·ªói t·∫°o th√¥ng b√°o comment:", err);
    res.status(500).json({ success: false, message: "L·ªói server" });
  }
};

// ‚úÖ [POST] /notification/approve-user
const createApproveUserNotification = async (req, res) => {
  try {
    const managerId = req.user.id;
    const { eventId, userId } = req.body;

    const event = await Event.findById(eventId).populate("createBy", "name");
    if (!event)
      return res.status(404).json({ success: false, message: "Kh√¥ng t√¨m th·∫•y s·ª± ki·ªán" });

    if (userId.toString() === managerId.toString())
      return res.status(200).json({ success: true, message: "Kh√¥ng t·∫°o th√¥ng b√°o cho ch√≠nh m√¨nh" });

    const manager = await User.findById(managerId);
    const content = `${manager.name} ƒë√£ ch·∫•p nh·∫≠n b·∫°n tham gia s·ª± ki·ªán "${event.title}".`;

    const notification = await Notification.create({
      userId,
      senderId: managerId,
      eventId,
      type: "approve_user",
      content,
    });

    return res.status(201).json({
      success: true,
      message: "T·∫°o th√¥ng b√°o duy·ªát ng∆∞·ªùi tham gia th√†nh c√¥ng",
      notification,
    });
  } catch (error) {
    console.error("‚ùå L·ªói t·∫°o th√¥ng b√°o duy·ªát ng∆∞·ªùi tham gia:", error);
    return res.status(500).json({
      success: false,
      message: "L·ªói server khi t·∫°o th√¥ng b√°o duy·ªát ng∆∞·ªùi tham gia",
    });
  }
};

// üü© Duy·ªát b√†i vi·∫øt
const createApprovePostNotification = async (req, res) => {
  try {
    const { postId } = req.body;
    const adminId = req.user.id;

    const post = await Post.findById(postId).populate("userId", "name");
    if (!post) return res.status(404).json({ success: false, message: "Kh√¥ng t√¨m th·∫•y b√†i vi·∫øt" });

    const content = `B√†i vi·∫øt c·ªßa b·∫°n "${post.content.slice(0, 30)}..." ƒë√£ ƒë∆∞·ª£c duy·ªát.`;
    const notification = await Notification.create({
      userId: post.userId._id,
      senderId: adminId,
      postId,
      type: "approve_post",
      content,
    });

    res.status(201).json({ success: true, notification });
  } catch (err) {
    console.error("‚ùå L·ªói t·∫°o th√¥ng b√°o duy·ªát b√†i:", err);
    res.status(500).json({ success: false, message: "L·ªói server" });
  }
};

// üü© Duy·ªát s·ª± ki·ªán
const createApproveEventNotification = async (req, res) => {
  try {
    const { eventId } = req.body;
    const adminId = req.user.id;

    const event = await Event.findById(eventId).populate("createBy", "name");
    if (!event) return res.status(404).json({ success: false, message: "Kh√¥ng t√¨m th·∫•y s·ª± ki·ªán" });

    const content = `S·ª± ki·ªán "${event.title}" c·ªßa b·∫°n ƒë√£ ƒë∆∞·ª£c duy·ªát.`;
    const notification = await Notification.create({
      userId: event.createBy._id,
      senderId: adminId,
      eventId,
      type: "approve_event",
      content,
    });

    res.status(201).json({ success: true, notification });
  } catch (err) {
    console.error("‚ùå L·ªói t·∫°o th√¥ng b√°o duy·ªát s·ª± ki·ªán:", err);
    res.status(500).json({ success: false, message: "L·ªói server" });
  }
};

// üü© User ƒëƒÉng k√Ω s·ª± ki·ªán ‚Üí g·ª≠i th√¥ng b√°o cho manager ho·∫∑c admin
const createUserRegisterNotification = async (req, res) => {
  try {
    const userId = req.user.id;
    const { eventId } = req.body;

    const event = await Event.findById(eventId).populate("createBy", "name");
    if (!event)
      return res.status(404).json({ success: false, message: "Kh√¥ng t√¨m th·∫•y s·ª± ki·ªán" });

    const user = await User.findById(userId); // üëâ l·∫•y th√¥ng tin user t·ª´ DB

    let receiver = await User.findOne({ role: "manager" });
    if (!receiver) receiver = await User.findOne({ role: "admin" });

    if (!receiver)
      return res.status(404).json({ success: false, message: "Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi nh·∫≠n th√¥ng b√°o" });

    const content = `${user.name} ƒë√£ ƒëƒÉng k√Ω tham gia s·ª± ki·ªán "${event.title}".`; // ‚úÖ d√πng user.name

    const notification = await Notification.create({
      userId: receiver._id,
      senderId: userId,
      eventId,
      type: "new_user_register",
      content,
    });

    res.status(201).json({ success: true, notification });
  } catch (err) {
    console.error("‚ùå L·ªói t·∫°o th√¥ng b√°o user ƒëƒÉng k√Ω:", err);
    res.status(500).json({ success: false, message: "L·ªói server" });
  }
};


// üü© S·ª± ki·ªán m·ªõi ‚Üí g·ª≠i admin
const createEventNotification = async (req, res) => {
  try {
    const { eventId } = req.body;
    const event = await Event.findById(eventId).populate("createBy", "name");
    const admin = await User.findOne({ role: "admin" });

    const content = `S·ª± ki·ªán "${event.title}" c·ªßa ${event.createBy.name} ƒëang ch·ªù duy·ªát.`;
    const notification = await Notification.create({
      userId: admin._id,
      senderId: event.createBy._id,
      eventId,
      type: "new_event",
      content,
    });

    res.status(201).json({ success: true, notification });
  } catch (err) {
    console.error("‚ùå L·ªói t·∫°o th√¥ng b√°o s·ª± ki·ªán m·ªõi:", err);
    res.status(500).json({ success: false, message: "L·ªói server" });
  }
};

// üü© B√†i vi·∫øt m·ªõi ‚Üí g·ª≠i admin
const createPostNotification = async (req, res) => {
  try {
    const { postId } = req.body;
    const post = await Post.findById(postId).populate("userId", "name");
    const admin = await User.findOne({ role: "admin" });

    const content = `B√†i vi·∫øt c·ªßa ${post.userId.name} ƒëang ch·ªù duy·ªát.`;
    const notification = await Notification.create({
      userId: admin._id,
      senderId: post.userId._id,
      postId,
      type: "new_post",
      content,
    });

    res.status(201).json({ success: true, notification });
  } catch (err) {
    console.error("‚ùå L·ªói t·∫°o th√¥ng b√°o b√†i vi·∫øt m·ªõi:", err);
    res.status(500).json({ success: false, message: "L·ªói server" });
  }
};

// üü© User xem th√¥ng b√°o c·ªßa m√¨nh
const getNotifications = async (req, res) => {
  try {
    const userId = req.user.id;
    const notifications = await Notification.find({ userId })
      .populate("senderId", "name avatar")
      .populate("eventId")
      .populate("postId")
      .sort({ createdAt: -1 });

    res.status(200).json({ success: true, notifications });
  } catch (err) {
    console.error("‚ùå L·ªói l·∫•y danh s√°ch th√¥ng b√°o:", err);
    res.status(500).json({ success: false, message: "L·ªói server" });
  }
};

// üü© Admin xem th√¥ng b√°o (s·ª± ki·ªán/b√†i vi·∫øt ch·ªù duy·ªát)
const getNotificationsByAdmin = async (req, res) => {
  try {
    const notifications = await Notification.find({
      $or: [{ type: "new_event" }, { type: "new_post" }, { type: "new_user_register" }],
    })
      .populate("userId")
      .populate("senderId")
      .populate("eventId")
      .populate("postId")
      .sort({ createdAt: -1 });

    res.status(200).json({ success: true, notifications });
  } catch (err) {
    console.error("‚ùå L·ªói l·∫•y th√¥ng b√°o admin:", err);
    res.status(500).json({ success: false, message: "L·ªói server" });
  }
};

// üü© ƒê√°nh d·∫•u ƒë√£ ƒë·ªçc
const markAsRead = async (req, res) => {
  try {
    await Notification.findByIdAndUpdate(req.params.id, { isRead: true });
    res.status(200).json({ success: true, message: "ƒê√£ ƒë√°nh d·∫•u ƒë√£ ƒë·ªçc" });
  } catch (err) {
    console.error("‚ùå L·ªói ƒë√°nh d·∫•u ƒë√£ ƒë·ªçc:", err);
    res.status(500).json({ success: false, message: "L·ªói server" });
  }
};

// üü© X√≥a th√¥ng b√°o
const deleteNotification = async (req, res) => {
  try {
    await Notification.findByIdAndDelete(req.params.id);
    res.status(200).json({ success: true, message: "X√≥a th√¥ng b√°o th√†nh c√¥ng" });
  } catch (err) {
    console.error("‚ùå L·ªói x√≥a th√¥ng b√°o:", err);
    res.status(500).json({ success: false, message: "L·ªói server" });
  }
};

module.exports = {
  createLikeNotification,
  createCommentNotification,
  createApprovePostNotification,
  createApproveEventNotification,
  createApproveUserNotification,
  createUserRegisterNotification,
  createEventNotification,
  createPostNotification,
  getNotifications,
  getNotificationsByAdmin,
  markAsRead,
  deleteNotification,
};
